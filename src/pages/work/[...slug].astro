---
import { getCollection, getEntry, render } from 'astro:content';

import BaseLayout from '../../layouts/BaseLayout.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import SEO from '../../components/SEO.astro';

export const prerender = true;

export async function getStaticPaths() {
  const allWork = await getCollection('work');
  return allWork.map(({ id }) => ({
    params: { slug: id },
    props: { id },
  }));
}

const { id } = Astro.props;
if (!id) throw new Error('Slug introuvable dans Astro.props');

const entry = await getEntry('work', id);
if (!entry) throw new Error(`Aucune entrée trouvée pour le slug "${id}"`);

const { Content } = await render(entry);
const title = (entry.data.title || '').replace(' ✅', '');
const canonicalPath = `/work/${id}/`; // <- relatif (SEO.astro fera l’absolu)
const publishedTime = entry.data.publishDate instanceof Date
  ? entry.data.publishDate.toISOString()
  : entry.data.publishDate;
---
<BaseLayout title={title} description={entry.data.description}>
  <SEO
    type="article"
    title={`${title} – Projet par Vincent Silvestri`}
    description={entry.data.description}
    canonicalUrl={canonicalPath}
    image={entry.data.img}
    imageAlt={entry.data.img_alt || title}
    publishedTime={publishedTime}
    tags={entry.data.tags || []}
  />

  <div class="stack gap-20">
    <div class="stack gap-15">
      <header>
        <div class="wrapper stack gap-2">
          <a class="back-link" href="/work">
            <Icon icon="arrow-left" />
            Mes Projets
          </a>
          <Hero title={title} align="start">
            <div class="details">
              <div class="tags">
                {(entry.data.tags || []).map((t:any) => <Pill>{t}</Pill>)}
              </div>
              {entry.data.description && (
                <p class="description">{entry.data.description}</p>
              )}
            </div>
          </Hero>
        </div>
      </header>

      <main class="wrapper">
        <div class="stack gap-10 content">
          {entry.data.img && (
            entry.data.demo ? (
              <a
                href={entry.data.demo}
                target="_blank"
                rel="noopener noreferrer"
                aria-label={`Voir la démo de ${title}`}
                class="demo-image"
              >
                <img src={entry.data.img} alt={entry.data.img_alt || title} loading="lazy" />
              </a>
            ) : (
              <img src={entry.data.img} alt={entry.data.img_alt || title} loading="lazy" />
            )
          )}
          <div class="prose">
            <Content />
          </div>
        </div>
      </main>
    </div>
    <ContactCTA />
  </div>
</BaseLayout>


<style>
header {
  padding-bottom: 2.5rem;
  border-bottom: 1px solid var(--gray-800);
}

.back-link {
  display: none;
}

.details {
  display: flex;
  flex-direction: column;
  padding: 0.5rem;
  gap: 1.5rem;
  justify-content: space-between;
  align-items: center;
}

.tags {
  display: flex;
  flex-wrap: wrap;
  gap: 0.4rem;
  justify-content: center;
}

.tags > .pill {
  flex: 0 1 auto;
}

.description {
  font-size: var(--text-lg);
  max-width: 54ch;
}

.content {
  margin-inline: auto;
  width: 80%;
}

.prose {
  max-width: 80ch;
  margin-inline: auto;
}

.prose > :global(* + *) {
  margin-top: 1rem;
}

.prose :global(h1),
.prose :global(h2),
.prose :global(h3),
.prose :global(h4),
.prose :global(h5) {
  margin: 1.5rem 0;
}

.content :global(img),
.responsive-img {
  border-radius: 1.5rem;
  box-shadow: var(--shadow-sm);
  background: var(--gradient-subtle);
  border: 1px solid var(--gray-800);
  width: 100%;
  height: auto;
}

.demo-image {
  display: block;
}

.demo-image:focus-visible {
  outline: 2px solid var(--accent);
  outline-offset: 4px;
}

.demo-image img {
  aspect-ratio: 16 / 9;
  object-fit: cover;
}

.prose :global(blockquote) {
  font-size: var(--text-lg);
  font-family: var(--font-brand);
  font-weight: 600;
  line-height: 1.1;
  padding-inline-start: 1.5rem;
  border-inline-start: 0.25rem solid var(--accent-dark);
  color: var(--gray-0);
}

.back-link,
.prose :global(a) {
  text-decoration: 1px solid underline transparent;
  text-underline-offset: 0.25em;
  transition: text-decoration-color var(--theme-transition);
}

.back-link:hover,
.back-link:focus,
.prose :global(a:hover),
.prose :global(a:focus) {
  text-decoration-color: currentColor;
}

@media (min-width: 50em) {
  .back-link {
    display: block;
    align-self: flex-start;
  }

  .details {
    flex-direction: row;
    gap: 2.5rem;
  }

  .prose :global(blockquote) {
    font-size: var(--text-2xl);
  }
}

</style>
